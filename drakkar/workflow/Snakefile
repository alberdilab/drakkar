import os
import gzip
import pandas as pd
from glob import glob

####
# Define config variables
####

configfile: "workflow/config.yaml"
WORKFLOW = config["workflow"]

####
# Calculate optimal resources for computing
####
def calculate_file_sizes(folder):
    file_sizes = {}
    for file in os.listdir(folder):
        if file.endswith("1.fq.gz") or file.endswith(".fna"):
            filepath = os.path.join(folder, file)
            # Get file size in bytes and convert to megabytes
            size_mb = os.path.getsize(filepath) / (1024 ** 2)
            file_sizes[file] = size_mb
    return file_sizes

def calculate_file_size(filepath):
    file_size = os.path.getsize(filepath) / (1024 ** 2)
    return file_size

reads_mb = calculate_file_sizes(READS_DIR)
reads_mb = {key.replace('_1.fq.gz', ''): value for key, value in reads_mb.items()}
reads_mb_total = sum(reads_mb.values())

reference_mb = calculate_file_size(REFERENCE)

if WORKFLOW == "complete":
    rule all:
        input:
            "results/complete.txt"

    include: "rules/preprocessing.smk"
    include: "rules/assembly.smk"
    include: "rules/binning.smk"
    include: "rules/annotation.smk"
    include: "rules/quantification.smk"

if WORKFLOW == "preprocessing":

    READS_DIR = config["reads_dir"]
    OUTPUT_DIR = config["output_dir"]
    REFERENCE = config["reference"]

    samples, = glob_wildcards(f"{READS_DIR}/{{sample}}_1.fq.gz")

    rule all:
        input:
            expand(f"{OUTPUT_DIR}/preprocessing/bowtie2/{{sample}}.bam", sample=samples)

    include: "rules/preprocessing.smk"

if WORKFLOW == "cataloging":

    ASSEMBLY_MODE = config["assembly_mode"]

    samples, = glob_wildcards(f"{READS_DIR}/{{sample}}_1.fq.gz")

    rule all:
        input:
            expand(f"{OUTPUT_DIR}/preprocessing/bowtie2/{{sample}}.bam", sample=samples)

    include: "rules/assembly.smk"
